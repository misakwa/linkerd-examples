---
kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1beta1
metadata:
  name: dtabs.l5d.io
spec:
  scope: Namespaced
  group: l5d.io
  version: v1alpha1
  names:
    kind: DTab
    plural: dtabs
    singular: dtab

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: namerd-config
data:
  config.yml: |-
    admin:
      ip: 0.0.0.0
      port: 9991

    # Namers provide Linkerd with service discovery information.  To use a
    # namer, you reference it in the dtab by its prefix.  We define 4 namers:
    # * /io.l5d.k8s gets the address of the target app
    # * /io.l5d.k8s.http gets the address of the http-incoming Linkerd router on the target app's node
    # * /io.l5d.k8s.h2 gets the address of the h2-incoming Linkerd router on the target app's node
    # * /io.l5d.k8s.grpc gets the address of the grpc-incoming Linkerd router on the target app's node
    namers:
    - kind: io.l5d.k8s
    - kind: io.l5d.k8s
      prefix: /io.l5d.k8s.http
      transformers:
        # The daemonset transformer replaces the address of the target app with
        # the address of the http-incoming router of the Linkerd daemonset pod
        # on the target app's node.
      - kind: io.l5d.k8s.daemonset
        namespace: linkerd
        port: http-incoming
        service: l5d
        # hostNetwork: true # Uncomment if using host networking (eg for CNI)
    - kind: io.l5d.k8s
      prefix: /io.l5d.k8s.h2
      transformers:
        # The daemonset transformer replaces the address of the target app with
        # the address of the h2-incoming router of the Linkerd daemonset pod
        # on the target app's node.
      - kind: io.l5d.k8s.daemonset
        namespace: linkerd
        port: h2-incoming
        service: l5d
        # hostNetwork: true # Uncomment if using host networking (eg for CNI)
    - kind: io.l5d.k8s
      prefix: /io.l5d.k8s.grpc
      transformers:
        # The daemonset transformer replaces the address of the target app with
        # the address of the grpc-incoming router of the Linkerd daemonset pod
        # on the target app's node.
      - kind: io.l5d.k8s.daemonset
        namespace: linkerd
        port: grpc-incoming
        service: l5d
        # hostNetwork: true # Uncomment if using host networking (eg for CNI)
    - kind: io.l5d.rewrite
      prefix: /portNsSvcToK8s
      pattern: "/{port}/{ns}/{svc}"
      name: "/k8s/{ns}/{port}/{svc}"

    storage:
      kind: io.l5d.k8s
      host: localhost
      port: 8001
      namespace: linkerd

    interfaces:
    - kind: io.l5d.thriftNameInterpreter
      ip: 0.0.0.0
      port: 4100
    - kind: io.l5d.httpController
      ip: 0.0.0.0
      port: 4180
    - kind: io.l5d.mesh
      ip: 0.0.0.0
      port: 4321

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: namerd
  labels:
    app: namerd
spec:
  minReadySeconds: 30
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 0
  replicas: 3
  selector:
    matchLabels:
      app: namerd
  template:
    metadata:
      labels:
        app: namerd
    spec:
      dnsPolicy: ClusterFirst
      volumes:
      - name: namerd-config
        configMap:
          name: namerd-config
      containers:
      - name: namerd
        image: buoyantio/namerd:1.6.4
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        args:
        - /io.buoyant/namerd/config/config.yml
        ports:
        - name: thrift
          containerPort: 4100
        - name: http
          containerPort: 4180
        - name: mesh
          containerPort: 4321
        - name: admin
          containerPort: 9991
        livenessProbe:
          httpGet:
            path: /admin/ping
            port: 9991
          initialDelaySeconds: 5
        volumeMounts:
        - name: "namerd-config"
          mountPath: "/io.buoyant/namerd/config"
          readOnly: true
      - name: kubectl
        image: buoyantio/kubectl:v1.14.3
        args:
        - "proxy"
        - "-p"
        - "8001"

---
apiVersion: v1
kind: Service
metadata:
  name: namerd
spec:
  type: ClusterIP
  selector:
    app: namerd
  ports:
  - name: thrift
    port: 4100
  - name: http
    port: 4180
  - name: mesh
    port: 4321
  - name: admin
    port: 9991

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: namerctl-script
data:
  createNs.sh: |-
    #!/bin/sh

    set -e

    # This dtab looks up service names in k8s and falls back to DNS if they're
    # not found (e.g. for external services). It accepts names of the form
    # "service" and "service.namespace", defaulting the namespace to
    # "default". For DNS lookups, it uses port 80 if unspecified. Note that
    # dtab rules are read bottom to top. To see this in action, on the Linkerd
    # administrative dashboard, click on the "dtab" tab, select "http-outgoing"
    # from the dropdown, and enter a service name like "a.b". (Or click on the
    # "requests" tab to see recent traffic through the system and how it was
    # resolved.)
    if namerctl dtab get http-outgoing > /dev/null 2>&1; then
      echo "http-outgoing namespace already exists"
    else
      echo "
      /ph                      => /$/io.buoyant.rinet ;
      /svc                     => /$/io.buoyant.porthostPfx/ph ;
      /k8s                     => /#/io.l5d.k8s.http ;
      /portNsSvc               => /#/portNsSvcToK8s ;
      /host                    => /portNsSvc/http/default ;
      /host                    => /portNsSvc/http ;
      /svc                     => /$/io.buoyant.http.domainToPathPfx/host ;
      /$/inet/*/4140           => !;
      /$/io.buoyant.rinet/4141 => !;
      " | namerctl dtab create http-outgoing -
    fi

    if namerctl dtab get http-incoming > /dev/null 2>&1; then
      echo "http-incoming namespace already exists"
    else
      echo "
      /k8s                     => /#/io.l5d.k8s ;
      /portNsSvc               => /#/portNsSvcToK8s ;
      /host                    => /portNsSvc/http/default ;
      /host                    => /portNsSvc/http ;
      /svc                     => /$/io.buoyant.http.domainToPathPfx/host ;
      /$/inet/*/4140           => !;
      /$/io.buoyant.rinet/4141 => !;
      " | namerctl dtab create http-incoming -
    fi

    if namerctl dtab get h2-outgoing > /dev/null 2>&1; then
      echo "h2-outgoing namespace already exists"
    else
      echo "
      /ph                      => /$/io.buoyant.rinet ;
      /svc                     => /$/io.buoyant.porthostPfx/ph ;
      /k8s                     => /#/io.l5d.k8s.h2 ;
      /portNsSvc               => /#/portNsSvcToK8s ;
      /host                    => /portNsSvc/h2/default ;
      /host                    => /portNsSvc/h2 ;
      /svc                     => /$/io.buoyant.http.domainToPathPfx/host ;
      /$/inet/*/4240           => !;
      /$/io.buoyant.rinet/4241 => !;
      " | namerctl dtab create h2-outgoing -
    fi

    if namerctl dtab get h2-incoming > /dev/null 2>&1; then
      echo "h2-incoming namespace already exists"
    else
      echo "
      /k8s                     => /#/io.l5d.k8s ;
      /portNsSvc               => /#/portNsSvcToK8s ;
      /host                    => /portNsSvc/h2/default ;
      /host                    => /portNsSvc/h2 ;
      /svc                     => /$/io.buoyant.http.domainToPathPfx/host ;
      /$/inet/*/4240           => !;
      /$/io.buoyant.rinet/4241 => !;
      " | namerctl dtab create h2-incoming -
    fi

    if namerctl dtab get grpc-outgoing > /dev/null 2>&1; then
      echo "grpc-outgoing namespace already exists"
    else
      echo "
      /hp                      => /$/inet ;
      /svc                     => /$/io.buoyant.hostportPfx/hp ;
      /k8s                     => /#/io.l5d.k8s.grpc ;
      /portNsSvc               => /#/portNsSvcToK8s ;
      /srv                     => /portNsSvc/grpc/default ;
      /srv                     => /portNsSvc/grpc ;
      /svc                     => /$/io.buoyant.http.domainToPathPfx/srv ;
      /$/inet/*/4340           => !;
      /$/io.buoyant.rinet/4341 => !;
      " | namerctl dtab create grpc-outgoing -
    fi

    if namerctl dtab get grpc-incoming > /dev/null 2>&1; then
      echo "grpc-incoming namespace already exists"
    else
      echo "
      /k8s                     => /#/io.l5d.k8s ;
      /portNsSvc               => /#/portNsSvcToK8s ;
      /srv                     => /portNsSvc/grpc/default ;
      /srv                     => /portNsSvc/grpc ;
      /svc                     => /$/io.buoyant.http.domainToPathPfx/srv ;
      /$/inet/*/4340           => !;
      /$/io.buoyant.rinet/4341 => !;
      " | namerctl dtab create grpc-incoming -
    fi

    if namerctl dtab get http-ingress > /dev/null 2>&1; then
      echo "http-ingress namespace already exists"
    else
      echo "
      /svc => /#/io.l5d.k8s;
      " | namerctl dtab create http-ingress -
    fi

    if namerctl dtab get h2-ingress > /dev/null 2>&1; then
      echo "h2-ingress namespace already exists"
    else
      echo "
      /svc => /#/io.l5d.k8s;
      " | namerctl dtab create h2-ingress -
    fi

---
kind: Job
apiVersion: batch/v1
metadata:
  name: namerctl
spec:
  template:
    metadata:
      name: namerctl
    spec:
      volumes:
      - name: namerctl-script
        configMap:
          name: namerctl-script
          defaultMode: 0755
      containers:
      - name: namerctl
        image: linkerd/namerctl:0.8.6
        env:
        - name: NAMERCTL_BASE_URL
          value: http://namerd.linkerd.svc.cluster.local:4180
        command:
        - "/namerctl/createNs.sh"
        volumeMounts:
        - name: "namerctl-script"
          mountPath: "/namerctl"
          readOnly: true
      restartPolicy: OnFailure
